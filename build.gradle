
plugins {
    id("org.jetbrains.kotlin.jvm") version "1.3.72"
}

def resultTestSet = sourceSets.create("resultTest")
def metaUtilsSet = sourceSets.create("metaUtils"){
    compileClasspath += sourceSets.main.compileClasspath
    runtimeClasspath += sourceSets.main.runtimeClasspath
}

apply plugin: MetaUtils

def mcJarWithInterfaces
metaUtils {
    def mcJar = createJarTest("testOriginalJar")
    def apiRuntime = createJarTest("apiRuntime")
    mcJarWithInterfaces = createAttachInterfacesTask(mcJar.output.classesDirs.files)

    mcJar.compileClasspath += apiRuntime.output
    resultTestSet.compileClasspath += apiRuntime.output
    resultTestSet.runtimeClasspath += apiRuntime.output

    sourceSets.test.runtimeClasspath += apiRuntime.output // For verifying asm output
//    sourceSets.test.runtimeClasspath += mcJar.output // For verifying asm output
    sourceSets.test.compileClasspath += metaUtilsSet.output
    sourceSets.test.runtimeClasspath += metaUtilsSet.output

    sourceSets.main.compileClasspath += metaUtilsSet.output
    sourceSets.main.runtimeClasspath += metaUtilsSet.output

    tasks.attachInterfaces.dependsOn("testOriginalJarClasses")
    tasks.compileResultTestKotlin.dependsOn(tasks.attachInterfaces)
    tasks.test.dependsOn(tasks.attachInterfaces)

}
tasks.compileTestOriginalJarJava.options.compilerArgs += "-parameters"

configurations {
    resultTestCompile.extendsFrom testCompile
    resultTestRuntime.extendsFrom testRuntime
}

task resultTest(type: Test) {
    group 'Verification'
    description 'Runs the resultTest tests.'
    testClassesDirs = resultTestSet.output.classesDirs
    classpath = resultTestSet.runtimeClasspath

    useJUnitPlatform()

    maxHeapSize = '1G'
}

build.dependsOn(resultTest)



group("io.github.febb")
version("1.0-SNAPSHOT")

repositories {
    mavenCentral()
//    jcenter()
//    maven { url "https://dl.bintray.com/arrow-kt/arrow-kt/" }
}

dependencies {

    implementation("org.ow2.asm:asm:8.0.1")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation 'org.ow2.asm:asm-tree:8.0.1'
    implementation 'com.squareup:javapoet:1.12.1'
    implementation 'org.ow2.asm:asm-util:8.0.1'

//    def arrow_version = "0.10.5"
//    implementation "io.arrow-kt:arrow-fx:$arrow_version"
//    implementation "io.arrow-kt:arrow-syntax:$arrow_version"
//    kapt    "io.arrow-kt:arrow-meta:$arrow_version"

//    implementation("io.github.febb:MetaUtils:1.0-SNAPSHOT")

    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5:1.3.72'
    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.4.2')
    resultTestImplementation 'org.jetbrains.kotlin:kotlin-test-junit5:1.3.72'
    resultTestRuntime('org.junit.jupiter:junit-jupiter-engine:5.4.2')

//    resultTestImplementation(files("build/resources/test/abstractedSrcCompiled.jar"))
    resultTestImplementation(files("build/resources/test/abstractedAsm.jar"))
    // For verifying generated bytecode
//    testRuntime(mcJarWithInterfaces)
    resultTestImplementation(mcJarWithInterfaces)
    apiRuntimeImplementation(mcJarWithInterfaces)
}


tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
    kotlinOptions.jvmTarget = "1.8"
    kotlinOptions.freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
}


test {
    useJUnitPlatform()

    maxHeapSize = '1G'
}

